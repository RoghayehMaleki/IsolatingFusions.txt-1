############################
  # B_I-isolating fusion program
  # By Roghayeh Maleki and Allen Herman - last updated: April 19, 2022
############################
# The first few commands are needed for producing the set 
# of left regular matrices for various algebraic structures. 
############################
# This function produces standard matrices from the basic matrix of 
# an association scheme or coherent configuration. 
############################

AdjacencyMatrices := function(M)
   local A, i, j, k, n, d;

   n := Length(M);
   d := Maximum(M[1]);
   for i in [1..n] do 
     d:=Maximum(d,Maximum(M[i])); 
   od;
   A := [];
   for i in [1..d+1] do
       A[i] := NullMat(n, n);
   od;
   for k in [1..d+1] do 
   for i in [1..n] do 
       for j in [1..n] do
           if M[i][j]=k-1 then 
           A[k][i][j]:=1; 
           fi;
       od;
   od;
   od;

   return A;
end;
##############################
# If G is a nontrivial subgroup of Sym([1..n]), or is mapped isomorphically to one 
# by "IsomorphismPermGroup", the next function produces the basic matrix 
# of the two-orbit coherent configuration corresponding to the action of 
# G on [1..n].
#############################
TwoOrbitConfiguration := function(G)
    local f, g, n, L, d, M, x, y, i;

    g:=G;
# Use the next two lines if G is not a subgroup of S_n:
#    f:=IsomorphismPermGroup(G); 
#    g:=Image(f);
    n:=LargestMovedPoint(g);
    L:=Orbits(g,Tuples([1..n],2),OnTuples);
    d:=Length(L); 
    M := NullMat(n, n);
    for x in [1..n] do
        for y in [1..n] do
            for i in [1..d] do
                if [x,y] in L[i] then
                    M[x][y] := i - 1;
                fi;
            od;
        od;
    od;

    return M;
end;
#############################
FullMatrixAlgebraConfiguration:=function(N)
local M,i,j;

M:=[]; 
for i in [1..N] do 
  M[i]:=[]; 
for j in [1..N] do 
  M[i][j]:=(i-1)*N+(j-1); 
od; 
od; 

return M;
end;
#############################
# This function produces the left regular matrices 
# for the standard basis of an association scheme 
# that is given by its basic matrix. 
############################

RegularMatricesOfAssociationScheme:=function(C)
local i,j,b1,n,b,d,k;

d:=AdjacencyMatrices(C);
n := Size(d);;
b := Basis(Algebra(Rationals,d),d);
b1 := [];
 for i in [1..n] do 
   b1[i]:=[];
   for j in [1..n] do  
       b1[i][j]:=Coefficients(b,b[i]*b[j]);
   od;
 od;

b:=[]; 
for i in [1..n] do b[i]:=TransposedMat(b1[i]); od; 

return b;
end;
  
################################################################
# Given a finite basis of an algebra in GAP, this function 
# produces the left regular matrices associated with that 
# basis.  
################################################################

LeftRegularMatricesOfBasis:=function(B)
local i,j,b1,n,b,d,b2,k;

n := Size(B);;
b := Basis(Algebra(Rationals,B),B);
if not(b=fail) then
b1:=[];
for i in [1..n] do
 b1[i]:=[ ];
 for j in [1..n] do 
     b1[i][j]:=Coefficients(b,b[i]*b[j]);
 od;
od;
b:=[]; 
for i in [1..n] do b[i]:=TransposedMat(b1[i]); od; 
fi;

return b;
end;

################################################################
# The columns of a Fourier matrix are a basis for an algebra 
# under pointwise multiplication.  This command produces the 
# left regular matrices for the basis of columns. 
################################################################

RegularMatricesFromFourierMatrix:=function(S) 
local B,r,F,i,a,D,b;

B:=TransposedMat(S);
r:=Length(B);
F:=Rationals; 
for i in [1..r] do 
  a:=PrimitiveElement(F);
  F:=Field(Union([a],B[i])); 
od; 
 
D:=[]; 
for i in [1..r] do 
  D[i]:=DiagonalMat(B[i]); 
od; 

b:=LeftRegularMatricesOfBasis(D);

return b;
end;
##############################################################
# A finite group G is the group basis of the rational group 
# algebra QG.  This command produces the left regular matrices 
# for this basis. 
##############################################################

LeftRegularMatricesOfGroupBasis:=function(G)
local R,z,n,g,i,b,j;

R:=GroupRing(Rationals,G);
z:=Identity(R);
n:=Size(G);
g:=[];
for i in [1..n] do 
  g[i]:=z*Elements(G)[i];
od;
g:=Basis(R,g);
b:=LeftRegularMatricesOfBasis(g); 

return b;
end;
#####################################################################
# Given a basis b=[b[1],...b[n]] for an algebra over Q and partition 
# p of [1..n], this command returns the left regular matrices for the 
# fusion of b corresponding to the partition p, in the case that this 
# fusing produces the basis of an algebra, otherwise it returns fail.  
# It does not check the involution condition required for a semifusion 
# to be a fusion. 
#####################################################################
 
SemifusionTA:=function(b,p)
local r,k,D,i,j,a,d,l;

r:=Length(b); 
k:=Length(p); 
d:=fail; 

if k<5*r/6 then 
D:=[]; 

for i in [1..k] do 
  D[i]:=0*IdentityMat(r); 
  for j in [1..Length(p[i])] do 
    D[i]:=D[i]+b[p[i][j]]; 
  od; 
od;

d:=[];
a:=Algebra(Rationals,D); 
if not(Dimension(a)=Length(D)) then 
#  Print(Dimension(a));
  d:=fail; 
else
D:=Basis(a,D); 
if D=fail then d:=fail; else
for i in [1..k] do 
 d[i]:=[];
for j in [1..k] do 
  d[i][j]:=Coefficients(D,D[i]*D[j]); 
od; 
od;
for i in [1..k] do 
  d[i]:=TransposedMat(d[i]);  
od;
fi; 
fi;
fi;

return d; 
end; 

###########################################
# The next two commands are subroutines used by the main 
# IsolatingFusion function. 
############################################

JColumnSumsOfKRowsOfBI:=function(B,I,J,K)
local i,j,k,s,b,s1;  

b:=0*B[1]; 
for i in I do b:=b+B[i]; od; 

s:=[];
for k in K do 
s1:=0; 
for j in J do s1:=s1+b[k][j]; od; 
Add(s,s1);
od; 

return s; 
end; 
############################################################
PartitionKForJColumnSumsOfBI:=function(B,I,J,K,P1)
local S,P,K1,m,l,R,a,k,Q,p;

S:=JColumnSumsOfKRowsOfBI(B,I,J,K);

P:=[]; 
K1:=K;
m := Size(B);
l:=Length(K1);
while l >0 do
   R := [];
   a := S[Position(K,K1[1])]; 
   for k in K1 do
      if S[Position(K,k)] = a then Add(R,k); fi;
   od;
   Add(P,R);
   K1:=Difference(K1,R);
   l := Length(K1);
od;

Q:=P; 
for p in P1 do 
  if not(p=K) then 
    Add(Q,p);
  fi;
od; 

Sort(Q);

return Q;
end;  

########################################################
# Main IsolatingFusion function.  Given a basis B=[B[1]=Identity(A),..,B[n]]
# for a Q-algebra A and a non-empty subset I of [2..n], this returns the 
# minimal B_I-isolating semifusion of B when this exists.  If no such 
# B_I-isolating semifusion exist, it will continue with the same method and  
# allow decompositions of I until it finds a semifusion containing B_I as a 
# sum of basis elements.    
########################################################
IsolatingFusion:=function(B,I)
local C,P,l,p,q,r,L,m,i; 

m:=Length(B[1][1]);
# for configurations switch to these lines:
 L:=Difference([1..m],I); 
 P:=[L,I];
#L:=Difference([2..m],I); 
#P:=[[1],L,I];
P:=PartitionKForJColumnSumsOfBI(B,I,I,L,P);  

l:=Length(P)-1;
while l<Length(P) and I in P do
l:=Length(P); 

for q in P do 
for r in P do 
  if not(r=I) then 
  P:=PartitionKForJColumnSumsOfBI(B,I,q,r,P); 
  fi;
od; 
od; 

for p in P do 
for r in P do 
  if not(r=I) then 
  P:=PartitionKForJColumnSumsOfBI(B,p,I,r,P); 
  fi;
od; 
od;
l:=Length(P); 
od; 

l:=Length(P)-1;
while l<Length(P) do
l:=Length(P); 
 
for p in P do 
for q in P do
for r in P do 
if Length(r)>1 then 
  P:=PartitionKForJColumnSumsOfBI(B,p,q,r,P);
  if not(r in P) then break; fi;
fi;
od; 
od; 
od;

od; 

return P;
end;

########################################################
# The next function computes the Q-isolating fusion in the 
# case where the input Q is a collection of two or more sets.
# Note: For this function to work properly, B[1] should be 
# the identity of the algebra QB and [1] should be included in Q.
########################################################

MultipleSetIsolatingFusion:=function(B,Q)
local Q1,I,C,P,l,p,q,r,L,m,i; 

m:=Length(B[1][1]);
Q1:=[]; 
for I in Q do 
  Q1:=UnionSet(Q1,I); 
od; 
# for configurations change this 2 to 1
L:=Difference([1..m],Q1);
P:=UnionSet(Q,[L]);

l:=Length(P)-1;
while l<Length(P) do
l:=Length(P); 
 
for p in P do 
for q in P do
for r in P do 
if Length(r)>1 then 
  P:=PartitionKForJColumnSumsOfBI(B,p,q,r,P);
  if not(r in P) then break; fi;
fi;
od; 
od; 
od;
od;  

return P;
end;

##############################
# The next command is a sample of code for detecting fusions of 
# ZG whose standard matrices have noncyclotomic eigenvalues.  
# It has variations for searching *-symmetric or *-asymmetric basis 
# elements b_I to be fused, their valencies, and the number of 
# random I's of each type to be generated and tested.  It prints 
# the I and the factor of the minimal polynomial of b_I that has 
# noncyclotomic roots as it runs.  

NoncyclotomicSchurRingTest:=function(G)
local R,z,g,i,b,n,I,s,P,F,S,S1,f,j,d1,t,T,A,a1,k;

R:=GroupRing(Rationals,G);
z:=Identity(R);
g:=[]; 
for i in [1..Size(G)] do 
  g[i]:=z*Elements(G)[i]; 
od; 
g:=Basis(R,g);
b:=LeftRegularMatricesOfBasis(g);
S1:=[];
S:=[];

n:=0; 
while n<10 do 
n:=n+1;
Print(n,"               \r");
I:=[];
if n<5 then 
for i in [1..2] do 
 s:=Position(g,Random(g)); 
 AddSet(I,s); AddSet(I,Position(g,g[s]^-1)); 
od; 
fi;
if 4<n and n<9 then  
  for i in [1..4] do 
  s:=Position(g,Random(g)); 
  if not(Position(g,g[s]^-1) in I) then AddSet(I,s); fi; 
  od;
fi;
if 8<n then  
  for i in [1..6] do 
  s:=Position(g,Random(g)); 
  if not(Position(g,g[s]^-1) in I) then AddSet(I,s); fi; 
  od;
fi;

if 1 in I then Remove(I,1); fi;
P:=IsolatingFusion(b,I);
Print(n," ",Length(P),"  \r");
if Length(P)<Size(G) then 
F:=SemifusionTA(b,P);
if not(F=fail) then 
for i in [1..Length(F)] do 
  f:=Factors(MinimalPolynomial(F[i]));
  Print(n," ",Length(F)," ",i," ",Length(f),"\r"); 
  for j in [1..Length(f)] do 
    d1:=Degree(f[j]); 
    if d1>2 and d1<10 and not(f[j] in S) then 
        t:=GaloisType(f[j]); 
        T:=TransitiveGroup(d1,t); 
        if not(IsAbelian(T)) then 
  AddSet(S1,f[j]);
  Print(Length(P)," ",P[i]," ",f[j]," ",StructureDescription(T)); 
  a1:=Algebra(Rationals,F); 
  if IsCommutative(a1) then Print(" commutative"); fi;
  if F[i] in Center(a1) then Print(" central"); fi; 
  A:=0*b[1]; for k in P[i] do A:=A+b[k]; od; 
  if A*TransposedMat(A)=TransposedMat(A)*A then 
        Print(" diagonalizable \n"); else Print("\n"); fi;  
        fi; 
    Add(S,f[j]); 
    fi; 
  od;
od;   
fi;
fi;
od;

return S1;
end;

############################################
# The next four functions are required for "NoncyclotomicFusionsSchurianScheme", 
# these come from Hanaki and Miyamoto's 
# "Elementary Functions for Association Schemes in GAP" 
# < http://math.shinshu-u.ac.jp/~hanaki/as/gap/association_scheme.gap >.
############################################
###########################
IsAssociationScheme := function(M)
    local i, j, k, A, V, d, n, l, Mat2Vec;
    
    Mat2Vec := function(M)
        local i, V;
        
        V := M[1] * 1;
        for i in [2..Length(M)] do
            Append(V, M[i]);
        od;
        
        return V;
    end;
    
    n := Length(M);
    A := AdjacencyMatrices(M);
    d := Length(A);
    V := [];
    for i in [1..d] do
        Add(V, Mat2Vec(A[i]));
    od;
    
    if (IdentityMat(n) in A) = false then
        return false;
    fi;
    
    if ForAll([1..d], i -> (TransposedMat(A[i]) in A)) = false then
        return false;
    fi;
    
    for i in [1..d] do
        for j in [1..d] do
            V[d+1] := Mat2Vec(A[i]*A[j]);
            if RankMat(V) <> d then
                return false;
            fi;
        od;
    od;
    
    return true;
end;
#######################################
# The next function requires Leonard Soicher's "grape" package,  
# it uses the GAP implementation of Brendan Mackay's "nauty" program.
###########################
LoadPackage("grape");

AutomorphismGroupOfScheme:=function(R)
    local G, adj, gp, gr, n, x, y, i;
    
#    if _IsGrapeLoaded = false then
#        return fail;
#    fi;
    
    adj := AdjacencyMatrices(R);
    n := Length(R);
    G := SymmetricGroup(n);
    for i in [2..(Length(adj) - 1)] do
        gr := Graph(Group(()), [1..n], OnPoints, function(x,y) return adj[i][x][y]=1; end);
        gp := AutomorphismGroup(gr);
        G := Intersection(G, gp);
    od;
  
    return G;
end;
###########################
FusionScheme := function(M, L)
    local i, j, k, N, s, l, L2;

    if L[1] = [0] then
        L2 := L{[2..Length(L)]};
        L := L2;
    fi;
    s := Length(M);
    l := Length(L);
    N := NullMat(s, s);
    for i in [1..s] do
        for j in [1..s] do
            if i <> j then
                for k in [1..l] do
                    if M[i][j] in L[k] then
                        N[i][j] := k;
                    fi;
                od;
            fi;
        od;
    od;
      
    return N;
end;
############################
SchurianScheme:=function(G, H)
    local M, D, x, y, n, C, i, d;

    C := RightCosets(G, H);
    C := List(C, x -> Representative(x));
    n := Length(C);
    D := DoubleCosets(G, H, H);
    D := List(D, Elements);
    d := Length(D);
    M := NullMat(n, n);
    for x in [1..n] do
        for y in [1..n] do
            for i in [1..d] do
                if C[y]*C[x]^(-1) in D[i] then
                    M[x][y] := i - 1;
                fi;
            od;
        od;
    od;

    return M;
end;
##########################################
# The next function is used to search for noncyclotomic fusions 
# of a given Schurian scheme. 
##########################################
NoncyclotomicFusionsSchurianScheme:=function(G,H)
local S,A,A1,A2,A3,a,a1,r,R,z,g,i,b,n,I,s,P,P2,F,S1,S2,f,j,d1,t,T,k,G1,H1,a2,t1;


S:=SchurianScheme(G,H); 
A:=AdjacencyMatrices(S);
b:=LeftRegularMatricesOfBasis(A);
r:=Length(b);

S2:=[];
S1:=[];

n:=0; 
while n<20 do 
n:=n+1;
Print(n,"\r");
I:=[];

#if n=1 then I:=[2..r]; fi; 

if n>0 and n<6 then 
for i in [1..2] do 
 s:=Random([2..r]);  
 AddSet(I,s); 
od; 
fi;

if 5<n and n<11 then  
  for i in [1..3] do 
  s:=Random([2..r]);  
  AddSet(I,s); 
  od;
fi;

if 10<n and n<16 then 
for i in [1..4] do 
 s:=Random([2..r]);  
 AddSet(I,s); 
od; 
fi;

if 15<n and n<21 then  
  for i in [1..5] do 
  s:=Random([2..r]);  
  AddSet(I,s); 
  od;
fi;

P:=IsolatingFusion(b,I);
Print(n," ",Length(P),"        \r");
t1:=0;
for i in [1..Length(P)] do 
if Length(P[i])=(Size(G)/Size(H)-Length(P)+1) then t1:=1; fi; 
od; 
if t1=0 and Length(P)<Length(b) then 
F:=SemifusionTA(b,P);
if not(F=fail) then 
A1:=FusionScheme(S,P-1); 
if IsAssociationScheme(A1) then
#a:=Size(AutomorphismGroupOfScheme(A1)); 
for i in [1..Length(F)] do 
  f:=Factors(MinimalPolynomial(F[i]));
  Print(n," ",Length(F)," ",i," ",Length(f),"\r"); 
  for j in [1..Length(f)] do 
    d1:=Degree(f[j]); 
    if d1>2 and d1<10 and not(f[j] in S1) then 
        t:=GaloisType(f[j]); 
        T:=TransitiveGroup(d1,t); 
        if not(IsAbelian(T)) then 
  AddSet(S2,f[j]);
  Print(Size(G)/Size(H)," ",Length(P)," ",P[i]," ",f[j]," ",StructureDescription(T));
  P2:=IsolatingFusion(b,P[i]); 
  A3:=FusionScheme(S,P2-1);
  G1:=AutomorphismGroupOfScheme(A3);
  H1:=Stabilizer(G1,1); 
  a2:=Size(DoubleCosets(G1,H1,H1)); 
  if Length(P2)<a2 then Print("nonSchurian"); fi; 
  a1:=Algebra(Rationals,F);  
  if IsCommutative(a1) then Print(" commutative"); fi;
  if F[i] in Center(a1) then Print(" central"); fi;
    A2:=0*A[1]; for k in P[i] do A2:=A2+A[k]; od; 
  if A2*TransposedMat(A2)=TransposedMat(A2)*A2 then 
        Print(" diagonalizable \n"); else Print("\n"); fi;
        fi; 
    Add(S1,f[j]); 
    fi;
  od;
od;   
fi;
fi;
else Print(n," fail \r"); fi;
od;

return S2;
end;
